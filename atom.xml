<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Young‘s River</title>
  
  <subtitle>一个正能量的程序员，喜欢码字，热爱运动，向往自由</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://issacyoung.cn/"/>
  <updated>2021-03-06T06:29:51.045Z</updated>
  <id>http://issacyoung.cn/</id>
  
  <author>
    <name>Issac Young</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一步步吃透注册中心</title>
    <link href="http://issacyoung.cn/2021/03/05/%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%90%83%E9%80%8F%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://issacyoung.cn/2021/03/05/%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%90%83%E9%80%8F%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</id>
    <published>2021-03-05T00:44:11.000Z</published>
    <updated>2021-03-06T06:29:51.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h1><blockquote><p>单体架构发展到微服务，服务间通信、服务的配置，如何保证高可用、数据一致性，则需要一个统一的注册中心。目前注册中心的实现方式有，eureka、zookeeper、nacos、consul等解决方案，实现原理各不相同，适合各自的场景。</p></blockquote><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><blockquote><p>eureka，源自希腊语，意思是“我找到了”，是netflix的开源组件，并且集成在 SpringCloud的家族里。</p></blockquote><h3 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h3><ul><li>eureka server，提供服务注册和发现，多个Eureka Server之间会同步数据，做到状态同步</li><li>service provider，服务提供方，注册自身服务到 Eureka</li><li>service consumer，从 Eureka 获取服务注册列表</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;注册中心&quot;&gt;&lt;a href=&quot;#注册中心&quot; class=&quot;headerlink&quot; title=&quot;注册中心&quot;&gt;&lt;/a&gt;注册中心&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;单体架构发展到微服务，服务间通信、服务的配置，如何保证高可用、数据一致性，则需要一个统一的注册中心
      
    
    </summary>
    
    
      <category term="java" scheme="http://issacyoung.cn/categories/java/"/>
    
    
      <category term="java" scheme="http://issacyoung.cn/tags/java/"/>
    
      <category term="springboot" scheme="http://issacyoung.cn/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>学习计划</title>
    <link href="http://issacyoung.cn/2021/03/04/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <id>http://issacyoung.cn/2021/03/04/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</id>
    <published>2021-03-04T14:55:14.000Z</published>
    <updated>2021-03-07T13:05:22.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h1><blockquote><p>又将之前的个人网站捡了回来，作为自己持续学习的一个记录。年逾30，愈发地觉得无计划地学习，已不似年轻时脑子好用，等过了三五天时常不记得学的内容。有计划的学习，一来压力不会太大，再者记录在案方便回溯。</p></blockquote><a id="more"></a><h2 id="Java高级应用"><a href="#Java高级应用" class="headerlink" title="Java高级应用"></a>Java高级应用</h2><blockquote><p>怎么理解这个高级应用？个人总结而言，凡是去重抽象的操作都可以理解为高级应用。集合、池化技术、动态代理、进程通信等等</p></blockquote><ul><li>并发</li><li>io</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h2 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h2><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><blockquote><p>吃透 SpringBoot 对于如何快速构建一个可读性高、易扩展的web服务非常重要，我们常常陷入到业务的crud之中，继而在重复劳动中消磨时光，我以为敲代码本身的乐趣在于仿真和去重。</p></blockquote><h2 id="分布式系统中间件"><a href="#分布式系统中间件" class="headerlink" title="分布式系统中间件"></a>分布式系统中间件</h2><blockquote><p>这个是面试的高频点，也是作为一个合格的架构师所必须熟悉的。如何才能熟稔于心，必然是需要在日常工作中反复练习、应用，触类旁通。</p></blockquote><ul><li><p>注册中心</p><ul><li>eureka</li><li>nacos</li><li>zookeeper</li></ul></li><li><p>服务间通信</p><ul><li>feign</li><li>dubbo</li></ul></li><li><p>消息中间件</p><ul><li>RocketMq</li><li>Kafka</li></ul></li><li><p>缓存中间件</p><ul><li>Redis</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;学习计划&quot;&gt;&lt;a href=&quot;#学习计划&quot; class=&quot;headerlink&quot; title=&quot;学习计划&quot;&gt;&lt;/a&gt;学习计划&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;又将之前的个人网站捡了回来，作为自己持续学习的一个记录。年逾30，愈发地觉得无计划地学习，已不似年轻时脑子好用，等过了三五天时常不记得学的内容。有计划的学习，一来压力不会太大，再者记录在案方便回溯。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://issacyoung.cn/categories/java/"/>
    
    
      <category term="java" scheme="http://issacyoung.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>一步步读SpringBoot源码</title>
    <link href="http://issacyoung.cn/2020/02/28/%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%AF%BBSpringBoot%E6%BA%90%E7%A0%81/"/>
    <id>http://issacyoung.cn/2020/02/28/%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%AF%BBSpringBoot%E6%BA%90%E7%A0%81/</id>
    <published>2020-02-28T00:49:18.000Z</published>
    <updated>2021-03-09T10:54:07.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><blockquote><p>为神马读源码？知其然知其所以然，触类旁通，究其原理，自我折磨的过程中，反复咀嚼、思考。SpringBoot 原旨是为了快速开发网站，其一网站，访问指定服务器的资源，现如今资源大多是数据库，从web诞生之始，一如既是；其二开发，不是运维、不是设计，在于提供给开发人员；其三，快速是相对而言，原有的 ssm过于繁琐，在于模块的整合、配置。</p></blockquote><a id="more"></a><p>查看官网的声明，SpringBoot的宗旨如下：</p><ul><li>创建单体的Spring应用</li><li>内置 Tomcat、Jetty、Undertow，无需部署war包</li><li>各种 starter 插件，简化配置</li><li>支持Spring和第三方jar自动装配</li><li>提供 metrics、health checks 额外的配置</li><li>无需xml</li></ul><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><blockquote><p>具体一步步使用无需赘述，具体看看如何创建单体Spring应用。</p></blockquote><ol><li><p>创建 pom 文件，引入依赖，这里以 maven 构建工程为例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot 指定默认版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add typical dependencies for a web application web依赖集合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Example<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上的代码，启动main函数，web应用就起来了。看起来寥寥数语，究竟内藏什么玄呢？<code>@RestController</code> 给阅读代码的人提示被标注的类扮演处理 web 请求的角色， <code>@RequestMapping</code> 注解则扮演引路的角色，将访问路径映射到具体的方法上，同时 <code>@RestController</code>告诉 Spring 渲染的结果直接返回给调用者。</p><p><code>@EnableAutoConfiguration</code>注解则告诉 Spring Boot 是基于添加的依赖进行 Spring 配置，这里添加的是<code>spring-boot-starter-web</code>内置Tomcat、SpringMVC，表明即将启动的是个 web 工程。</p><p>至于 main 方法的逻辑，SpringApplication 调用 run 方法启动应用，装配 Spring，开启 Tomcat Web 工程，Example 作为主容器。</p></li><li><p>启动</p></li><li><p>构建可执行 jar</p><p>java 未提供装载嵌套的 jar包的标准方式，Spring Boot 提供了将程序依赖打包成一个压缩包的插件，<code>spring-boot-maven-plugin</code>，构建生成 xxx.jar 即是依赖的压缩包，可以直接运行。</p></li></ol><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>构建依赖体系，每一个版本的 springboot 集成特定版本的依赖包括第三方依赖。</p><p>继承父工程的依赖 <code>spring-boot-starter-parent</code>，提供了如下特征：</p><ul><li>java1.8编译</li><li>UTF-8编码</li><li>版本管理…</li></ul><ol><li><p>继承父starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加其他依赖无需指定版本号，如果需要覆盖父工程的集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring-data-releasetrain.version</span>&gt;</span>Fowler-SR2<span class="tag">&lt;/<span class="name">spring-data-releasetrain.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>&lt;dependencyManagement&gt;</code> 、<code>&lt;scope&gt;import&lt;/scope&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Import dependency management from Spring Boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于有父依赖工程的项目，使用<code>dependecyManagement</code>，同时可以指定版本覆盖集合依赖</p></li></ol><h3 id="代码框架"><a href="#代码框架" class="headerlink" title="代码框架"></a>代码框架</h3><p>springboot 对代码框架没有严格要求，默认从 main 程序入口扫描实体类。<code>@SpringBootApplication</code> 相当于 <code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code>。</p><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><p><code>@Configuration</code>修饰单个类相当于原来的 Spring xml ，同时 <code>@Import</code> 可以引入附加的配置类，<code>@ComponentScan</code>可以扫描 spring 组件，包括 <code>@Configuration</code>，当然 xml 文件也可以通过 <code>@ImportResource</code>引入。 </p><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><p>springboot 根据添加的依赖自动装配类到程序中，通过 <code>@EnableAutoConfiguration</code>或者 <code>@SpringBootApplication</code>修饰 <code>@Configuration</code>类。</p><p>exclude 可以指定排除某个类的自动装配。</p><h3 id="实体类和依赖注入"><a href="#实体类和依赖注入" class="headerlink" title="实体类和依赖注入"></a>实体类和依赖注入</h3><p>通过 <code>@Autowired</code> 可以修饰构造器注入，如果只有一个构造器，可以忽略。</p><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p>相当于 <code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code>、<code>@Configuration</code>三者集合。</p><h3 id="Developer-Tools"><a href="#Developer-Tools" class="headerlink" title="Developer Tools"></a>Developer Tools</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springboot 利用缓存机制提高性能，比如：静态资源，开发环境可以利用 developer tools 关闭缓存。在类文件发生修改时自动重启服务，可以指定排除的文件目录，也可以指定额外的监控目录。</p><h2 id="Spring-Boot-特征"><a href="#Spring-Boot-特征" class="headerlink" title="Spring Boot 特征"></a>Spring Boot 特征</h2><p><code>SpringApplication.run</code> 静态方法启动。</p><h3 id="启动失败"><a href="#启动失败" class="headerlink" title="启动失败"></a>启动失败</h3><p><code>$ java -jar myproject-0.0.1-SNAPSHOT.jar --debug</code> 可以查询启动日志</p><h3 id="个性化-banner"><a href="#个性化-banner" class="headerlink" title="个性化 banner"></a>个性化 banner</h3><p>在类路径下添加 <code>banner.txt</code>，或者指定<code>spring.banner.location</code> 指定文件，同时可以指定banner字符集<code>spring.banner.charset</code>。除了文本，也支持 <code>banner.gif</code>、<code>banner.jpg</code> 类路径下的图片，或者指定 banner图片<code>spring.banner.image.localtion</code></p><h3 id="事件和监听器"><a href="#事件和监听器" class="headerlink" title="事件和监听器"></a>事件和监听器</h3><p>Spring 框架中，<code>ContextRefreshedEvent</code>在上下文创建后创建，对于上下文创建之前的事件不能通过 <code>@Bean</code> 注册，可以通过 <code>SpringApplication.addListeners(...)</code>。</p><ol><li><code>ApplicationStartingEvent</code>，在注册监听器和初始化器操作外所有启动进程之前</li><li><code>ApplicationEnvironmentPreparedEvent</code>，<code>Environment</code> 使用时，但上下文创建之前</li><li><code>ApplicatioPreparedEvent</code> ，bean definitions 装载之后，refresh启动之前</li><li><code>ApplicationStartedEvent</code>，上下文刷新之后，application 和 command-line runner 调用之前</li><li><code>ApplicationReadyEvent</code>，application 和 command-line runner 调用之后，提示服务准备处理请求</li><li><code>ApplicationFailedEvent</code>，启动过程有异常</li></ol><h3 id="Web-Environment"><a href="#Web-Environment" class="headerlink" title="Web Environment"></a>Web Environment</h3><ul><li><code>AnnotationConfigServletWebServerApplicationContext</code> 使用了这个上下文类表示 Spring MVC</li><li><code>AnnotationConfigReactiveWebServerApplicationContext</code>，这个表示 Spring WebFlux</li><li>否则，使用<code>AnnotationConfigApplicationContext</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot&quot;&gt;&lt;a href=&quot;#SpringBoot&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot&quot;&gt;&lt;/a&gt;SpringBoot&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;为神马读源码？知其然知其所以然，触类旁通，究其原理，自我折磨的过程中，反复咀嚼、思考。SpringBoot 原旨是为了快速开发网站，其一网站，访问指定服务器的资源，现如今资源大多是数据库，从web诞生之始，一如既是；其二开发，不是运维、不是设计，在于提供给开发人员；其三，快速是相对而言，原有的 ssm过于繁琐，在于模块的整合、配置。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://issacyoung.cn/categories/java/"/>
    
    
      <category term="java" scheme="http://issacyoung.cn/tags/java/"/>
    
      <category term="SpringBoot" scheme="http://issacyoung.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>一步步之Discruotor I</title>
    <link href="http://issacyoung.cn/2020/02/24/%E4%B8%80%E6%AD%A5%E6%AD%A5%E4%B9%8BDiscruotor-I/"/>
    <id>http://issacyoung.cn/2020/02/24/%E4%B8%80%E6%AD%A5%E6%AD%A5%E4%B9%8BDiscruotor-I/</id>
    <published>2020-02-24T04:03:30.000Z</published>
    <updated>2020-03-10T00:33:18.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Discruptor-高性能队列"><a href="#Discruptor-高性能队列" class="headerlink" title="Discruptor 高性能队列"></a>Discruptor 高性能队列</h1><p>Discruptor 是一个高性能的异步框架，可以理解为线程间通信的高效低延迟的内存消息队列。而这里说的消息队列，不同于类似 RocketMQ 之类的分布式队列。早期用于英国外汇交易 LMAX ，单线程系统可支撑每秒处理600万订单。目前有很多成熟的项目使用 Disruptor ，比方说 Log4j 2、Camel等。</p><a id="more"></a><p>队列的底层实现是数组、链表或者堆，而堆表示有优先级的</p><h1 id="对比-J-U-C-工具"><a href="#对比-J-U-C-工具" class="headerlink" title="对比 J.U.C 工具"></a>对比 J.U.C 工具</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Discruptor-高性能队列&quot;&gt;&lt;a href=&quot;#Discruptor-高性能队列&quot; class=&quot;headerlink&quot; title=&quot;Discruptor 高性能队列&quot;&gt;&lt;/a&gt;Discruptor 高性能队列&lt;/h1&gt;&lt;p&gt;Discruptor 是一个高性能的异步框架，可以理解为线程间通信的高效低延迟的内存消息队列。而这里说的消息队列，不同于类似 RocketMQ 之类的分布式队列。早期用于英国外汇交易 LMAX ，单线程系统可支撑每秒处理600万订单。目前有很多成熟的项目使用 Disruptor ，比方说 Log4j 2、Camel等。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Discruptor" scheme="http://issacyoung.cn/tags/Discruptor/"/>
    
      <category term="一步步" scheme="http://issacyoung.cn/tags/%E4%B8%80%E6%AD%A5%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>如何一步步创建个人网站</title>
    <link href="http://issacyoung.cn/2020/02/22/%E5%A6%82%E4%BD%95%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    <id>http://issacyoung.cn/2020/02/22/%E5%A6%82%E4%BD%95%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</id>
    <published>2020-02-22T14:44:35.000Z</published>
    <updated>2020-02-24T04:04:49.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何一步步创建个人网站"><a href="#如何一步步创建个人网站" class="headerlink" title="如何一步步创建个人网站"></a>如何一步步创建个人网站</h1><blockquote><p>早就想建一个人网站，用于知识积累、感悟心得的记录，得空利用半天周末的时间完成了这个夙愿。</p></blockquote><a id="more"></a><h2 id="获取个人域名"><a href="#获取个人域名" class="headerlink" title="获取个人域名"></a>获取个人域名</h2><p>推荐阿里云申请域名，需要有认证的阿里云账号，审核时间很快，具体步骤阿里云平台有详细的文档。</p><h2 id="Github建立个人仓库"><a href="#Github建立个人仓库" class="headerlink" title="Github建立个人仓库"></a>Github建立个人仓库</h2><p>在 github 代码仓库新建一个仓库，仓库名称参考 *<em>用户名.github.io *</em>，用户名为 github 账号。</p><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>注意 Node 的版本，Node 下载地址：<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/</a>。</p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>Hexo 是个人博客网站的框架。注意 Hexo 的版本对应的 Node 版本，之前安装因为 Node 版本与 Hexo 版本不一致，有些 Node 的语法不支持，耗费了不少时间。</p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>基于命令行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 hexo 客户端</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> npm 安装访问境外网站比较慢，推荐设置 npm 镜像为淘宝镜像</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证 npm 的镜像地址</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果还是很慢，可以考虑用 yarn 安装</span></span><br><span class="line">yarn global add hexo-cli</span><br></pre></td></tr></table></figure><h3 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line">hexo -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化 hexo 博客项目</span></span><br><span class="line">hexo init blog</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建博客</span></span><br><span class="line">hexo new/n "我的第一篇个人网站博客"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成/编译</span></span><br><span class="line">hexo generate/n </span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务预览</span></span><br><span class="line">hexo server/s</span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署</span></span><br><span class="line">hexo deploy/d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除缓存</span></span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h3 id="Hexo-测试"><a href="#Hexo-测试" class="headerlink" title="Hexo 测试"></a>Hexo 测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new "我的第一篇个人网站博客"</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务 localhost:4000</span></span><br></pre></td></tr></table></figure><p>打开浏览器输入地址，访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><h2 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h2><p>需要将 github 的仓库地址同 Hexo 关联起来，打开项目目录的配置文件 <code>_config.yml</code>，修改部署配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/IssacYoung2013/issacyoung2013.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>安装 Git 部署插件，输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>重新部署服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这时访问个人仓库路径，<strong>用户名.github.io</strong>，个人博客网站就可以在网络上访问了。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>在阿里云申请的域名做解析设置</p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><h2 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h2><p>参考文章 <a href="https://blog.csdn.net/nightmare_dimple/article/details/86661502" target="_blank" rel="noopener">https://blog.csdn.net/nightmare_dimple/article/details/86661502</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何一步步创建个人网站&quot;&gt;&lt;a href=&quot;#如何一步步创建个人网站&quot; class=&quot;headerlink&quot; title=&quot;如何一步步创建个人网站&quot;&gt;&lt;/a&gt;如何一步步创建个人网站&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;早就想建一个人网站，用于知识积累、感悟心得的记录，得空利用半天周末的时间完成了这个夙愿。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="网站" scheme="http://issacyoung.cn/categories/%E7%BD%91%E7%AB%99/"/>
    
    
      <category term="个人博客网站" scheme="http://issacyoung.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    
      <category term="Hexo" scheme="http://issacyoung.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
